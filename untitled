#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// CUDA kernel. Each thread takes care of one element of c
__global__ void vecAdd(double *a, double *b, double *c, long n)
{   
    long index_x = blockIdx.x * blockDim.x + threadIdx.x;
  	long index_y = blockIdx.y * blockDim.y + threadIdx.y;

  	// map the two 2D indices to a single linear, 1D index
  	long grid_width = gridDim.x * blockDim.x;
  	long index = index_y * grid_width + index_x;

    // Make sure we do not go out of bounds
	if (index < n) 
		c[index] = a[index] + b[index];
}

int main( int argc, char* argv[] )
{
    // Size of vectors
    long n = 100000000; //100M

    // check for error
    cudaError_t error = cudaGetLastError();

    // Host input vectors
    double *h_a;
    double *h_b;
    //Host output vector
    double *h_c;

    // Device input vectors
    double *d_a;
    double *d_b;
    //Device output vector
    double *d_c;

    // Size, in bytes, of each vector
    size_t bytes = n * sizeof(double);

    // Allocate memory for each vector on host
    h_a = (double*)malloc(bytes);
    h_b = (double*)malloc(bytes);
    h_c = (double*)malloc(bytes);

    // Allocate memory for each vector on GPU
    cudaMalloc(&d_a, bytes);
    cudaMalloc(&d_b, bytes);
    cudaMalloc(&d_c, bytes);

    error = cudaGetLastError();
    if(error != cudaSuccess)
    {
        // print the CUDA error message and exit
    	printf("CUDA error1: %s\n", cudaGetErrorString(error));
    	exit(-1);
    }

    long i;
    // Initialize vectors on host
    for( i = 0; i < n; i++ ) {
    	h_a[i] = sin(i)*sin(i);
    	h_b[i] = cos(i)*cos(i);
    }

    // Copy host vectors to device
    cudaMemcpy( d_a, h_a, bytes, cudaMemcpyHostToDevice);
    cudaMemcpy( d_b, h_b, bytes, cudaMemcpyHostToDevice);


    error = cudaGetLastError();
    if(error != cudaSuccess)
    {
        // print the CUDA error message and exit
    	printf("CUDA error2: %s\n", cudaGetErrorString(error));
    	exit(-1);
    }

    // create two dimensional 4x4 thread blocks
	dim3 block_size;
	block_size.x = 1024;
	block_size.y = 1;

	// configure a two dimensional grid as well
	dim3 grid_size;
	grid_size.x = 64000;
	grid_size.y = 2;

    // Execute the kernel
    vecAdd<<<grid_size, block_size>>>(d_a, d_b, d_c, n);

    // Copy array back to host
    cudaMemcpy( h_c, d_c, bytes, cudaMemcpyDeviceToHost );

    // Sum up vector c and print result divided by n, this should equal 1 within error
    double sum = 0;
    for(i=0; i<n; i++)
    	sum += h_c[i];
    printf("final result: %f\n", sum/n);

    // Release device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);

    // Release host memory
    free(h_a);
    free(h_b);
    free(h_c);

    // check for error
    error = cudaGetLastError();
    if(error != cudaSuccess)
    {
        // print the CUDA error message and exit
    	printf("CUDA error: %s\n", cudaGetErrorString(error));
    	exit(-1);
    }


    return 0;
}

